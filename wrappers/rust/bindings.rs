/* automatically generated by rust-bindgen 0.63.0 */

pub const MOORDYN_ERR_LEVEL: u32 = 3;
pub const MOORDYN_WRN_LEVEL: u32 = 2;
pub const MOORDYN_MSG_LEVEL: u32 = 1;
pub const MOORDYN_DBG_LEVEL: u32 = 0;
pub const MOORDYN_NO_OUTPUT: u32 = 4096;
pub const MOORDYN_SUCCESS: u32 = 0;
pub const MOORDYN_INVALID_INPUT_FILE: i32 = -1;
pub const MOORDYN_INVALID_OUTPUT_FILE: i32 = -2;
pub const MOORDYN_INVALID_INPUT: i32 = -3;
pub const MOORDYN_NAN_ERROR: i32 = -4;
pub const MOORDYN_MEM_ERROR: i32 = -5;
pub const MOORDYN_INVALID_VALUE: i32 = -6;
pub const MOORDYN_NON_IMPLEMENTED: i32 = -7;
pub const MOORDYN_UNHANDLED_ERROR: i32 = -255;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDynWaves {
    _unused: [u8; 0],
}
#[doc = " A mooring point instance"]
pub type MoorDynWaves = *mut __MoorDynWaves;
extern "C" {
    #[doc = " @brief Get the velocity, acceleration, wave height and dynamic pressure\n at a specific positon and time\n @param waves The Waves instance\n @param x The point x coordinate\n @param y The point y coordinate\n @param z The point z coordinate\n @param U The output velocity\n @param Ud The output acceleration\n @param zeta The output wave height\n @param PDyn The output dynamic pressure\n @return 0 If the data is correctly set, an error code otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetWavesKin(
        waves: MoorDynWaves,
        x: f64,
        y: f64,
        z: f64,
        U: *mut f64,
        Ud: *mut f64,
        zeta: *mut f64,
        PDyn: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Compute the wave number\n @param Omega The wave angular frequency\n @param g The gravity acceleration\n @param h The water depth\n @return The wave number\n @note credit: FAST source"]
    pub fn WaveNumber(Omega: f64, g: f64, h: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDynLine {
    _unused: [u8; 0],
}
#[doc = " A mooring line instance"]
pub type MoorDynLine = *mut __MoorDynLine;
extern "C" {
    #[doc = " @brief Get the line identifier\n @param l The Moordyn line\n @param id The output id\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetLineID(
        l: MoorDynLine,
        id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line number of segments\n\n The number of nodes is equal to this value plus 1\n @param l The Moordyn line\n @param n The output number of nodes\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise"]
    pub fn MoorDyn_GetLineN(
        l: MoorDynLine,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line number of nodes\n @param l The Moordyn line\n @param n The output number of nodes\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise\n @see MoorDyn_GetLineN()"]
    pub fn MoorDyn_GetLineNumberNodes(
        l: MoorDynLine,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line unstretched length\n @param l The Moordyn line\n @param ul The output length\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise\n @see MoorDyn_GetLineN()"]
    pub fn MoorDyn_GetLineUnstretchedLength(l: MoorDynLine, ul: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a line node position\n @param l The Moordyn line\n @param i The node index\n @param pos The output node position\n @return MOORDYN_INVALID_VALUE if a NULL line is provided or if the node\n index is bigger than the number of segments, MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetLineNodePos(
        l: MoorDynLine,
        i: ::std::os::raw::c_uint,
        pos: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a line node tension\n @param l The Moordyn line\n @param i The node index\n @param t The output node tension\n @return MOORDYN_INVALID_VALUE if a NULL line is provided or if the node\n index is bigger than the number of segments, MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetLineNodeTen(
        l: MoorDynLine,
        i: ::std::os::raw::c_uint,
        t: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a line curvature at a node\n @param l The Moordyn line\n @param i The node index\n @param c The output line curvature\n @return MOORDYN_INVALID_VALUE if a NULL line is provided or if the node\n index is bigger than the number of segments, MOORDYN_SUCCESS otherwise\n @note The curvature is only computed if bending stiffness\n (moordyn::Line::EI) is not zero. Otherwise the curvature of every single\n node will be zero."]
    pub fn MoorDyn_GetLineNodeCurv(
        l: MoorDynLine,
        i: ::std::os::raw::c_uint,
        c: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the tension module at the end point B (the fairlead)\n @param l The Moordyn line\n @param t The output node tension module\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise"]
    pub fn MoorDyn_GetLineFairTen(l: MoorDynLine, t: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the maximum tension module\n @param l The Moordyn line\n @param t The output maximum tension module\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise"]
    pub fn MoorDyn_GetLineMaxTen(l: MoorDynLine, t: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Save the line to a VTK (.vtp) file\n @param l The Moordyn line\n @param filename The output maximum tension module\n @return MOORDYN_SUCCESS if the file is correctly written, an error code\n otherwise\n @note If MoorDyn has been built without VTK support, this function will\n return a MOORDYN_NON_IMPLEMENTED error, but it will be still available\n anyway"]
    pub fn MoorDyn_SaveLineVTK(
        l: MoorDynLine,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDynPoint {
    _unused: [u8; 0],
}
#[doc = " A mooring point instance"]
pub type MoorDynPoint = *mut __MoorDynPoint;
extern "C" {
    #[doc = " @brief Get the point identifier\n @param point The Moordyn point\n @param id The output id\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetPointID(
        point: MoorDynPoint,
        id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the point type\n @param point The Moordyn point\n @param t The output type\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise\n @see Point::types"]
    pub fn MoorDyn_GetPointType(
        point: MoorDynPoint,
        t: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the position of a point\n @param point The Moordyn point\n @param pos The output position\n @return MOORDYN_SUCCESS If the data is correctly set, an error code\n otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetPointPos(point: MoorDynPoint, pos: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the velocity of a point\n @param point The Moordyn point\n @param v The output velocity\n @return MOORDYN_SUCCESS If the data is correctly set, an error code\n otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetPointVel(point: MoorDynPoint, v: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the force at a point\n @param point The Moordyn point\n @param f The output force\n @return MOORDYN_SUCCESS If the data is correctly set, an error code\n otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetPointForce(point: MoorDynPoint, f: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the number of connected lines\n @param point The Moordyn point\n @param n The output number of connected lines\n @return MOORDYN_SUCCESS If the data is correctly set, an error code\n otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetPointNAttached(
        point: MoorDynPoint,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the number of connected lines\n @param point The Moordyn point\n @param i The index of the attached line\n @param l The output attached line\n @param e The output endpoint, see moordyn::EndPoints\n @return MOORDYN_SUCCESS If the data is correctly set, an error code\n otherwise\n (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetPointAttached(
        point: MoorDynPoint,
        i: ::std::os::raw::c_uint,
        l: *mut MoorDynLine,
        e: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDynRod {
    _unused: [u8; 0],
}
#[doc = " A mooring line instance"]
pub type MoorDynRod = *mut __MoorDynRod;
extern "C" {
    #[doc = " @brief Get the line identifier\n @param l The Moordyn line\n @param id The output id\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetRodID(l: MoorDynRod, id: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line type\n @param l The Moordyn line\n @param t The output type\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetRodType(
        l: MoorDynRod,
        t: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line number of segments\n\n The number of nodes is equal to this value plus 1\n @param l The Moordyn line\n @param n The output number of nodes\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise"]
    pub fn MoorDyn_GetRodN(l: MoorDynRod, n: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the line number of nodes\n @param l The Moordyn line\n @param n The output number of nodes\n @return MOORDYN_INVALID_VALUE if a NULL line is provided, MOORDYN_SUCCESS\n otherwise\n @see MoorDyn_GetRodN()"]
    pub fn MoorDyn_GetRodNumberNodes(
        l: MoorDynRod,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a line node position\n @param l The Moordyn line\n @param i The node index\n @param pos The output node position\n @return MOORDYN_INVALID_VALUE if a NULL line is provided or if the node\n index is bigger than the number of segments, MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetRodNodePos(
        l: MoorDynRod,
        i: ::std::os::raw::c_uint,
        pos: *mut f64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDynBody {
    _unused: [u8; 0],
}
#[doc = " A mooring line instance"]
pub type MoorDynBody = *mut __MoorDynBody;
extern "C" {
    #[doc = " @brief Get the body identifier\n @param b The Moordyn body\n @param id The output id\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise"]
    pub fn MoorDyn_GetBodyID(
        b: MoorDynBody,
        id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the point type\n @param b The Moordyn body\n @param t The output type\n @return MOORDYN_INVALID_VALUE if a NULL point is provided,\n MOORDYN_SUCCESS otherwise\n @see Point::types"]
    pub fn MoorDyn_GetBodyType(
        b: MoorDynBody,
        t: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the body state\n @param b The Moordyn body\n @param r The output position (6dof)\n @param rd The output velocity (6dof)\n @return MOORDYN_INVALID_VALUE if a NULL body is provided, MOORDYN_SUCCESS\n otherwise"]
    pub fn MoorDyn_GetBodyState(b: MoorDynBody, r: *mut f64, rd: *mut f64)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __MoorDyn {
    _unused: [u8; 0],
}
#[doc = " A mooring system instance"]
pub type MoorDyn = *mut __MoorDyn;
extern "C" {
    #[doc = " @brief Creates a MoorDyn instance\n\n At the time of creating a new MoorDyn instance, the input file is read\n and all the objects and structures are created. You must call afterwards\n MoorDyn_Init() to compute the initial conditions\n\n @param infilename The input file, if either NULL or \"\", then\n \"Mooring/lines.txt\" will be considered\n @return The mooring instance, NULL if errors happened"]
    pub fn MoorDyn_Create(infilename: *const ::std::os::raw::c_char) -> MoorDyn;
}
extern "C" {
    #[doc = " @brief Get the number of coupled Degrees Of Freedom (DOFs)\n\n The number of components for some parameters in MoorDyn_Init() and\n MoorDyn_Step() can be known using this function\n @return MOORDYN_INVALID_VALUE if @p system is NULL, MOORDYN_SUCESS\n otherwise"]
    pub fn MoorDyn_NCoupledDOF(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the instance verbosity level\n @param system The Moordyn system\n @param verbosity The verbosity level. It can take the following values\n  - MOORDYN_DBG_LEVEL Every single message will be printed\n  - MOORDYN_MSG_LEVEL Messages specially designed to help debugging the\n code will be omitted\n  - MOORDYN_WRN_LEVEL Just errors and warnings will be reported\n  - MOORDYN_ERR_LEVEL Just errors will be reported\n  - MOORDYN_NO_OUTPUT No info will be reported\n @return MOORDYN_SUCESS If the verbosity level is correctly set, an error\n code otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_SetVerbosity(
        system: MoorDyn,
        verbosity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the instance log file\n @param system The Moordyn system\n @param log_path The file path to print the log file\n @return MOORDYN_SUCESS If the log file is correctly set, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_SetLogFile(
        system: MoorDyn,
        log_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the instance log file printing level\n @param system The Moordyn system\n @param verbosity The log file print level. It can take the following\n values\n  - MOORDYN_DBG_LEVEL Every single message will be printed\n  - MOORDYN_MSG_LEVEL Messages specially designed to help debugging the\n code will be omitted\n  - MOORDYN_WRN_LEVEL Just errors and warnings will be reported\n  - MOORDYN_ERR_LEVEL Just errors will be reported\n  - MOORDYN_NO_OUTPUT No info will be reported\n @return MOORDYN_SUCESS If the printing level is correctly set, an error\n code otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_SetLogLevel(
        system: MoorDyn,
        verbosity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Log a message\n @param system The Moordyn system\n @param level The message level. It can take the following values\n  - MOORDYN_DBG_LEVEL for debugging messages\n  - MOORDYN_MSG_LEVEL for regular information messages\n  - MOORDYN_WRN_LEVEL for warnings\n  - MOORDYN_ERR_LEVEL for errors\n @param msg The message to log\n @return MOORDYN_SUCESS If the printing level is correctly set, an error\n code otherwise (see @ref moordyn_errors)\n @note This messages are subjected to the same rules than the inner\n messages, i.e. if @p level is lower than the threshold levels set with\n MoorDyn_SetVerbosity() and MoorDyn_SetLogLevel(), the message will not be\n logged in the terminal and the log file respectively\n @note This function will not log the file, line and function where it is\n called from, not even in case of warnings or errors"]
    pub fn MoorDyn_Log(
        system: MoorDyn,
        level: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Compute the initial condition of a MoorDyn system\n\n At the time of creating a new MoorDyn instance, the input file is read\n and all the objects and structures are created. You must call afterwards\n MoorDyn_Init() to compute the initial conditions\n\n @param system The Moordyn system\n @param x Position vector (6 components per coupled body or cantilevered\n rod and 3 components per pinned rod or coupled point)\n @param xd Velocity vector (6 components per coupled body or cantilevered\n rod and 3 components per pinned rod or coupled point)\n @return MOORDYN_SUCESS If the mooring system is correctly initialized,\n an error code otherwise (see @ref moordyn_errors)\n @note MoorDyn_NCoupledDOF() can be used to know the number of components\n required for \\p x and \\p xd"]
    pub fn MoorDyn_Init(system: MoorDyn, x: *const f64, xd: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief The same than MoorDyn_Init(), but the initial condition is not\n computed at all.\n\n This is of use when you are loading a state file afterwards with\n Moordyn_Load()\n\n @param system The Moordyn system\n @param x Position vector (6 components per coupled body or cantilevered\n rod and 3 components per pinned rod or coupled point)\n @param xd Velocity vector (6 components per coupled body or cantilevered\n rod and 3 components per pinned rod or coupled point)\n @return MOORDYN_SUCESS If the mooring system is correctly initialized,\n an error code otherwise (see @ref moordyn_errors)\n @note MoorDyn_NCoupledDOF() can be used to know the number of components\n required for \\p x and \\p xd"]
    pub fn MoorDyn_Init_NoIC(
        system: MoorDyn,
        x: *const f64,
        xd: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Runs a time step of the MoorDyn system\n @param system The Moordyn system\n @param x Position vector\n @param xd Velocity vector\n @param f Output forces\n @param t Simulation time\n @param dt Time step\n @return MOORDYN_SUCESS if the mooring system has correctly evolved, an\n error code otherwise (see @ref moordyn_errors)\n @note MoorDyn_NCoupledDOF() can be used to know the number of components\n required for \\p x, \\p xd and \\p f"]
    pub fn MoorDyn_Step(
        system: MoorDyn,
        x: *const f64,
        xd: *const f64,
        f: *mut f64,
        t: *mut f64,
        dt: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Releases MoorDyn allocated resources\n @param system The Moordyn system\n @return MOORDYN_SUCESS If the mooring system is correctly destroyed, an\n error code otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_Close(system: MoorDyn) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the wave kinematics instance\n\n The wave kinematics instance is only useful if WaveKin option is set to 2\n in the input file.\n @param system The Moordyn system\n @return The waves instance, NULL if errors happened"]
    pub fn MoorDyn_GetWaves(system: MoorDyn) -> MoorDynWaves;
}
extern "C" {
    #[doc = " @brief Initializes the external Wave kinetics\n\n This is useless unless WaveKin option is set to 1 in the input file. If\n that is the case, remember calling this function after MoorDyn_Init()\n @param system The Moordyn system\n @param n The number of points where the wave kinematics shall be provided\n @return MOORDYN_SUCESS If the external waves are correctly initialized,\n an error code otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_ExternalWaveKinInit(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the number of points where the waves kinematics shall be\n provided\n\n If env.WaveKin is not WAVES_EXTERNAL, this will return 0\n @return The number of evaluation points\n @see MoorDyn::ExternalWaveKinInit()\n @see MoorDyn::GetWaves()\n/\n/** @brief Get the number of points where the waves kinematics shall be\n provided\n\n This is useless unless WaveKin option is set to 1 in the input file\n @param system The Moordyn system\n @param n The output number of points where the wave kinematics shall be\n provided\n @return MOORDYN_SUCESS"]
    pub fn MoorDyn_ExternalWaveKinGetN(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the points where the waves kinematics shall be provided\n\n The kinematics on those points shall be provided just if WaveKin is set\n to 1 in the input file\n @param system The Moordyn system\n @param r The output coordinates (3 components per point)\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)\n @see MoorDyn_ExternalWaveKinInit()"]
    pub fn MoorDyn_ExternalWaveKinGetCoordinates(
        system: MoorDyn,
        r: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Set the kinematics of the waves\n\n Use this function if WaveKin option is set to 1 in the input file\n @param system The Moordyn system\n @param U The velocities at the points (3 components per point)\n @param Ud The accelerations at the points (3 components per point)\n @param t Simulation time\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)\n @see MoorDyn_ExternalWaveKinInit()\n @see MoorDyn_ExternalWaveKinGetCoordinates()"]
    pub fn MoorDyn_ExternalWaveKinSet(
        system: MoorDyn,
        U: *const f64,
        Ud: *const f64,
        t: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get the number of bodies\n\n Remember that the first body index is 1\n @param system The Moordyn system\n @param n The output number of bodies\n @return MOORDYN_SUCESS If the number is successfully got, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetNumberBodies(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a rigid body\n\n Remember that the first body index is 1\n @param system The Moordyn system\n @param b The body index\n @return The body instance, NULL if errors happened"]
    pub fn MoorDyn_GetBody(system: MoorDyn, b: ::std::os::raw::c_uint) -> MoorDynBody;
}
extern "C" {
    #[doc = " @brief Get the number of rods\n\n Remember that the first rod index is 1\n @param system The Moordyn system\n @param n The output number of rods\n @return MOORDYN_SUCESS If the number is successfully got, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetNumberRods(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a rod\n @param system The Moordyn system\n @param r The rod\n @return The rod instance, NULL if errors happened"]
    pub fn MoorDyn_GetRod(system: MoorDyn, r: ::std::os::raw::c_uint) -> MoorDynRod;
}
extern "C" {
    #[doc = " @brief Get the number of points\n\n Remember that the first point index is 1\n @param system The Moordyn system\n @param n The output number of points\n @return MOORDYN_SUCESS If the number is successfully got, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetNumberPoints(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a point\n @param system The Moordyn system\n @param c The point\n @return The point instance, NULL if errors happened"]
    pub fn MoorDyn_GetPoint(system: MoorDyn, c: ::std::os::raw::c_uint) -> MoorDynPoint;
}
extern "C" {
    #[doc = " @brief Get the number of lines\n\n Remember that the first line index is 1\n @param system The Moordyn system\n @param n The output number of lines\n @return MOORDYN_SUCESS If the number is successfully got, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetNumberLines(
        system: MoorDyn,
        n: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Get a line instance\n @param system The Moordyn system\n @param l The line identifier (from 1 to the number of lines)\n @return The line instance, NULL if errors happened"]
    pub fn MoorDyn_GetLine(system: MoorDyn, l: ::std::os::raw::c_uint) -> MoorDynLine;
}
extern "C" {
    #[doc = " @brief Function for providing FASTv7 customary line tension quantities\n @param system The Moordyn system\n @param numLines The number of lines\n @param FairHTen Allocated memory for the \\p numLines horizontal forces at\n the fairlead\n @param FairVTen Allocated memory for the \\p numLines vertical forces at\n the fairlead\n @param AnchHTen Allocated memory for the \\p numLines horizontal forces at\n the anchor\n @param AnchVTen Allocated memory for the \\p numLines vertical forces at\n the anchor\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_GetFASTtens(
        system: MoorDyn,
        numLines: *const ::std::os::raw::c_int,
        FairHTen: *mut f32,
        FairVTen: *mut f32,
        AnchHTen: *mut f32,
        AnchVTen: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Save the system so it can be loaded afterwards\n\n At the time of loading the system, it is still required to create the\n system reading the same definition file and calling MoorDyn_Init_NoIC()\n @param system The Moordyn system\n @param filepath The path of the file to write\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)\n @see MoorDyn_Load\n @see MoorDyn_Init_NoIC"]
    pub fn MoorDyn_Save(
        system: MoorDyn,
        filepath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Load the system saved before\n\n You must still call MoorDyn_Create() and MoorDyn_Init_NoIC() before\n calling this function\n @param system The Moordyn system\n @param filepath The path of the MoorDyn saved system\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)\n @see MoorDyn_Save\n @see MoorDyn_Init_NoIC"]
    pub fn MoorDyn_Load(
        system: MoorDyn,
        filepath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Draw the lines and points in the active OpenGL context\n\n The OpenGL context is assumed to be created by the caller before calling\n this function\n @param system The Moordyn system\n @return MOORDYN_SUCESS If the data is correctly set, an error code\n otherwise (see @ref moordyn_errors)"]
    pub fn MoorDyn_DrawWithGL(system: MoorDyn) -> ::std::os::raw::c_int;
}

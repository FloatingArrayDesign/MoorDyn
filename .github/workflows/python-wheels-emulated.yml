name: Python-manylinux-arch

on:
  workflow_call:
    inputs:
      os:
        description: 'Host OS'
        required: false
        type: string
        default: '["ubuntu-22.04"]'
      arch:
        description: 'Architecture target'
        required: true
        type: string
      vtk_major:
        description: 'VTK major version'
        required: false
        type: string
        default: '9'
      vtk_minor:
        description: 'VTK minor version'
        required: false
        type: string
        default: '3'
      vtk_patch:
        description: 'VTK patch version'
        required: false
        type: string
        default: '1'
        
permissions: write-all

jobs:
  build_wheels:
    name: Build Python wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os) }}
    env:
      # Skip 32-bit windows wheels builds.
      CIBW_SKIP: "*-win32* pp38-* pp39-* pp310-*"
      CIBW_ARCHS: ${{inputs.arch}}
      CIBW_ENVIRONMENT_LINUX: "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/project/install/lib"
      CIBW_BEFORE_ALL_LINUX: >
        if pip debug --verbose | grep -q 'musllinux'; then
            DISTRO=musllinux_1_2
        else
            DISTRO=manylinux2014
        fi &&
        echo "Considering vtk-${DISTRO}_`uname -m`.tar.gz..." &&
        mkdir -p vtk &&
        tar -xvzf vtk-${DISTRO}_`uname -m`.tar.gz -C vtk/ &&
        if [ -d "vtk/lib" ]; then
            VTK_DIR=vtk/lib/cmake/vtk-${{inputs.vtk_major}}.${{inputs.vtk_minor}}
        else
            VTK_DIR=vtk/lib64/cmake/vtk-${{inputs.vtk_major}}.${{inputs.vtk_minor}}
        fi &&
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER:BOOL=OFF -DRUST_WRAPPER:BOOL=OFF -DUSE_VTK=ON -DVTK_DIR=$VTK_DIR -DMOORDYN_PACKAGE_IGNORE_VTK_DEPENDENCY=ON -DBUILD_TESTING=OFF &&
        cmake --build build --config Release &&
        cmake --install build --config Release &&
        rm -rf docs extern source tests
      CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
      CIBW_BEFORE_ALL_WINDOWS: >
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER:BOOL=OFF -DRUST_WRAPPER:BOOL=OFF -DUSE_VTK=ON -DVTK_DIR=vtk/lib/cmake/vtk-${{inputs.vtk_major}}.${{inputs.vtk_minor}} -DMOORDYN_PACKAGE_IGNORE_VTK_DEPENDENCY=ON -DBUILD_TESTING=OFF &&
        cmake --build build --config Release &&
        cmake --install build --config Release &&
        rm -rf docs extern source tests
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path install/bin -w {dest_dir} {wheel}"
      CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET="10.15"'
      CIBW_BEFORE_ALL_MACOS: >
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER:BOOL=OFF -DRUST_WRAPPER:BOOL=OFF -DUSE_VTK=ON -DVTK_DIR=vtk/lib/cmake/vtk-${{inputs.vtk_major}}.${{inputs.vtk_minor}} -DMOORDYN_PACKAGE_IGNORE_VTK_DEPENDENCY=ON -DBUILD_TESTING=OFF -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_INSTALL_NAME_DIR:PATH=$(pwd)/install/lib &&
        cmake --build build --config Release &&
        cmake --install build --config Release &&
        rm -rf docs extern source tests
      
    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x' 

      - name: Create setup.py
        run: |
            mv wrappers/python/wheels.github/* ./
            python set_version.py
            python set_eigen_data.py
            rm set_version.py set_eigen_data.py            
            cat pyproject.toml
        shell: bash

      - name: download pre-built VTK static library (ManyLinux)
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{inputs.vtk_major}}.${{inputs.vtk_minor}}.${{inputs.vtk_patch}}-static/vtk-manylinux2014_${{inputs.arch}}.tar.gz
          target: ${{github.workspace}}/
        if: runner.os == 'Linux'

      - name: download pre-built VTK static library (MUSLLinux)
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{inputs.vtk_major}}.${{inputs.vtk_minor}}.${{inputs.vtk_patch}}-static/vtk-musllinux_1_2_${{inputs.arch}}.tar.gz
          target: ${{github.workspace}}/
        if: runner.os == 'Linux'

      - name: download pre-built VTK static library (Windows)
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{inputs.vtk_major}}.${{inputs.vtk_minor}}.${{inputs.vtk_patch}}-static/vtk-Windows-x86_64.tar.gz
          target: ${{github.workspace}}/
        if: runner.os == 'Windows'

      - name: download pre-built VTK static library (MacOS)
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{inputs.vtk_major}}.${{inputs.vtk_minor}}.${{inputs.vtk_patch}}-static/vtk-macOS-${{inputs.arch}}.tar.gz
          target: ${{github.workspace}}/
        if: runner.os == 'MacOS'

      - name: Create folders
        run: |
            mkdir -p ${{github.workspace}}/vtk
            mkdir -p ${{github.workspace}}/build
            mkdir -p ${{github.workspace}}/install

      - name: Extract VTK tgz (Windows)
        run: |
            tar -xvzf vtk-Windows-x86_64.tar.gz -C vtk/
        if: runner.os == 'Windows'

      - name: Extract VTK tgz (MacOS)
        run: |
            tar -xvzf vtk-macOS-${{inputs.arch}}.tar.gz -C vtk/
        if: runner.os == 'MacOS'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
        if: runner.os == 'Linux'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.1
        with:
            output-dir: dist

      - uses: actions/upload-artifact@v4
        id: build_wheels
        with:
          name: python-wheels-${{runner.os}}_${{inputs.arch}}
          path: ./dist/*
